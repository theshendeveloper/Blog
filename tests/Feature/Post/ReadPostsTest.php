<?php

namespace Tests\Feature\Post;

use App\Models\Category;
use App\Models\Comment;
use App\Models\Post;
use App\Models\Tag;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\View;
use Tests\TestCase;

class ReadPostsTest extends TestCase
{
    use RefreshDatabase;
    private $post;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->post = create(Post::class,['is_published'=>true]);
        Auth::logout();
        View::share('categories',Category::all());
        View::share('tags',Tag::all());

    }

    /** @test */
    public function a_user_can_view_all_published_posts()
    {
        $this->get(route('blog.index'))->
        assertOk()->assertSee($this->post->title);
    }


    /** @test */
    public function a_user_cannot_view_all_unpublished_posts()
    {
        $post = create(Post::class,['is_published'=>false]);
        $this->get(route('blog.index'))->
        assertOk()->assertDontSee($post->title);
    }

    /** @test */
    public function a_user_cannot_view_a_single_unpublished_post()
    {
        $post = create(Post::class,['is_published'=>false]);
        $this->get(route('posts.show',$post))->assertNotFound();
    }
    /** @test */
    public function an_authenticated_user_can_view_a_single_unpublished_post()
    {
        $user = $this->createUserAndAssignRole();
        $this->be($user);
        $post = create(Post::class,['is_published'=>false]);
        $this->get(route('posts.show',$post))->assertOk()->assertSee($post->title);
    }
    /** @test */
    public function a_user_can_view_a_single_published_post()
    {
        $this->get(route('posts.show',$this->post))->assertOk()->assertSee($this->post->title);
    }

    /** @test */
    public function a_user_can_view_published_comments_related_to_a_post()
    {
        $this->withoutExceptionHandling();
        $comment = create(Comment::class,['is_published'=> 1]);
        $response = $this->get(route('posts.show',$this->post))->assertOk()->assertSee($comment->content);
    }
}
