<?php

namespace Tests\Feature\Post;

use App\Models\Category;
use App\Models\Post;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class EditPostTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    private $post;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->post = $this->createPost();
        $this->post->publish();

    }

    /** @test */
    public function the_user_is_not_logged_in()
    {
        Auth::logout();
        $this->put(route('posts.update', $this->post), $this->validData())->assertRedirect('/adwise_panel/login');
        $this->get(route('posts.edit',$this->post))->assertRedirect('/adwise_panel/login');

        $this->assertGuest();

    }

    /** @test */
    public function the_user_does_not_have_authority_to_see_the_edit_page()
    {
        $user = $this->createUserAndAssignRole('whereNotIn');
        $this->actingAs($user)->get(route('posts.edit', $this->post))->assertForbidden();
    }

    /** @test */
    public function the_user_does_not_have_authority_to_edit_a_post()
    {
        $user = $this->createUserAndAssignRole('whereNotIn');
        $this->actingAs($user)->put(route('posts.update', $this->post),$this->validData())->assertForbidden();
    }

    /** @test */
    public function only_the_author_of_the_post_can_update_the_post()
    {
        $user = $this->createUserAndAssignRole('where','Writer');
        $this->actingAs($user)->put(route('posts.update', $this->post), $this->validData([], 'updated'))->assertForbidden();
    }

    /** @test */
    public function the_post_is_updated_by_author_successfully()
    {
        $user = $this->createUserAndAssignRole('where', 'Writer');
        $this->be($user);
        $post = $this->createPost();
        $post->publish();
        $title_before_update = $post->title;
        $new_post =  $this->validData([], 'updated');

        $this->actingAs($user)->put(route('posts.update', $post), $new_post)->assertRedirect(route('posts.show', $new_post['slug']));
        Storage::disk()->assertMissing("images/banners/" . basename($post->banner));
        $path = 'images/banners/'.$new_post['banner']->hashName();
        $post->refresh();
        $this->assertEquals(url($path), $post->banner);
        Storage::disk()->assertExists($path);
        $this->assertNotEquals($title_before_update, $post->title);



        $categories = $post->categories->pluck('id')->toArray();
        $tags = $post->tags->pluck('name')->toArray();
        $this->assertContains(3,$categories);
        $this->assertContains(4,$categories);
        $this->assertContains('test3',$tags);
        $this->assertContains('test4',$tags);
        $this->get(route('posts.show', $post))->assertSee($post->title);
    }

    /** @test */
    public function the_post_is_updated_by_admin_successfully()
    {

        $user = $this->createUserAndAssignRole('where', 'Admin');
        $post = $this->post;
        $title_before_update = $post->title;
        $new_post =  $this->validData([], 'updated');
        $this->actingAs($user)->put(route('posts.update', $post), $new_post)->assertRedirect(route('posts.show', $new_post['slug']));
        Storage::disk()->assertMissing("images/banners/" . basename($post->banner));
        $path = 'images/banners/'.$new_post['banner']->hashName();
        $post->refresh();
        $post =Post::first();
        $this->assertEquals(url($path), $post->banner);
        Storage::disk()->assertExists($path);
        $this->assertNotEquals($title_before_update, $post->title);


        $categories = $post->categories->pluck('id')->toArray();
        $tags = $post->tags->pluck('name')->toArray();
        $this->assertContains(3,$categories);
        $this->assertContains(4,$categories);
        $this->assertContains('test3',$tags);
        $this->assertContains('test4',$tags);
        $this->get(route('posts.show', $post))->assertSee($post->title);
    }


    // Validation Tests

    /** @test */
    public function the_slug_must_be_unique()
    {
        $user = $this->createUserAndAssignRole();
        $this->be($user);
        $post = $this->createPost();
        $this->attributeValidation('slug', $post->slug);
    }


    /** @test */
    public function the_slug_can_be_the_same_as_before()
    {
        $this->put(route('posts.update', $this->post), $this->validData(['slug' => $this->post->slug]))->assertSessionDoesntHaveErrors('slug');
    }

    /** @test */
    public function banner_is_not_required()
    {
        $this->put(route('posts.update', $this->post), $this->validData(['banner' => null]))->assertSessionDoesntHaveErrors('banner');
    }

    protected function attributeValidation($attribute, $value = null)
    {

        $this->put(route('posts.update', $this->post), $this->validData([$attribute => $value]))->assertSessionHasErrors($attribute);
    }

    protected function createPost($overrides = [])
    {

        Storage::fake();
        $this->post(route('posts.store'), $this->validData());
        return Post::all()->last();
    }

    protected function validData($attributes = [], $update = null)
    {
        $post = make(Post::class, $attributes)->toArray();
        factory(Category::class,2)->create();
        if (isset($update)) {
            $categories = [3, 4];
            $tags = ['test3','test4'];
        } else {
            $categories = [1, 2];
            $tags = ['test1','test2'];

        }
        $additional = [
            'categories' => $categories,
            'tags' => $tags,
            'banner' => UploadedFile::fake()->image('test.jpg'),
            'author_id' => null
        ];

        return array_merge($post, $additional);

    }

}
