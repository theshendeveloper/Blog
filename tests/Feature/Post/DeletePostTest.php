<?php

namespace Tests\Feature\Post;

use App\Models\Category;
use App\Models\Post;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class DeletePostTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    private $post;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->post = $this->createPost();
    }

    /** @test */
    public function the_user_is_not_logged_in()
    {
        Auth::logout();
        $this->delete(route('posts.destroy', $this->post))->assertRedirect('/adwise_panel/login');

        $this->assertGuest();

    }

    /** @test */
    public function the_user_does_not_have_authority_to_delete_a_post()
    {
        $user = $this->createUserAndAssignRole('whereNotIn');
        $this->actingAs($user)->delete(route('posts.destroy', $this->post))->assertForbidden();
    }

    /** @test */
    public function only_the_author_of_the_post_can_delete_the_post()
    {
        $user = $this->createUserAndAssignRole('where','Writer');
        $this->actingAs($user)->delete(route('posts.destroy', $this->post))->assertForbidden();
    }

    /** @test */

    public function the_post_is_deleted_by_author_successfully()
    {
        $this->assertNotEmpty(Post::find($this->post));
        $this->delete(route('posts.destroy', $this->post))->assertRedirect();
        Storage::disk()->assertMissing("images/banners/" . basename($this->post->banner));
        $this->assertEmpty(Post::find($this->post));
    }

    /** @test */

    public function the_post_is_deleted_by_admin_successfully()
    {
        $user = $this->createUserAndAssignRole('where', 'Admin');
        $this->assertNotEmpty(Post::find($this->post));
        $this->actingAs($user)->delete(route('posts.destroy', $this->post))->assertRedirect();
        Storage::disk()->assertMissing("images/banners/" . basename($this->post->banner));

        $this->assertEmpty(Post::find($this->post));
    }
    protected function createPost($overrides = [])
    {

        Storage::fake();
        $this->post(route('posts.store'), $this->validData());
        return Post::all()->last();
    }

    protected function validData($attributes = [], $update = null)
    {
        $post = make(Post::class, $attributes)->toArray();
        factory(Category::class,2)->create();
        $additional = [
            'categories' => [1,2],
            'tags' => ['test1','test2'],
            'banner' => UploadedFile::fake()->image('test.jpg'),
            'author_id' => null,
        ];
        return array_merge($post, $additional);

    }

}
