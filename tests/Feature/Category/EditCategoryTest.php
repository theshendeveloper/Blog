<?php

namespace Tests\Feature\Category;

use App\Models\Category;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class EditCategoryTest extends TestCase
{
    use RefreshDatabase,WithFaker;
    private $category;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->category = $this->createCategory();
    }


    /** @test */
    public function the_user_is_not_logged_in()
    {
        Auth::logout();
        $this->updateCategory()->assertRedirect('/adwise_panel/login');
        $this->get(route('categories.edit',$this->category))->assertRedirect('/adwise_panel/login');

        $this->assertGuest();

    }
    /** @test */
    public function the_user_does_not_have_authority_to_see_the_edit_page()
    {
        $user = $this->createUserAndAssignRole('whereNotIn');
        $this->be($user);
        $this->get(route('categories.edit',$this->category))->assertForbidden();
    }

    /** @test */
    public function the_user_does_not_have_authority_to_update_a_category()
    {
        $user = $this->createUserAndAssignRole('whereNotIn');
        $this->be($user);
        $this->updateCategory()->assertForbidden();
    }
    /** @test */
    public function the_category_is_updated_by_writer_successfully()
    {
        $user = $this->createUserAndAssignRole('where', 'Writer');
        $this->be($user);
        $category = $this->createCategory();
        $new_data =$this->validData();
        $this->updateCategory($category,$new_data)->assertRedirect(route('categories.index'));
        $category->refresh();
        $this->assertEquals($category->name,$new_data['name']);

    }

    /** @test */
    public function the_category_is_created_by_admin_successfully()
    {
        $user = $this->createUserAndAssignRole('where', 'Admin');
        $this->be($user);
        $category = $this->createCategory();
        $new_data =$this->validData();
        $this->updateCategory($category,$new_data)->assertRedirect(route('categories.index'));
        $category->refresh();
        $this->assertEquals($category->name,$new_data['name']);

    }

    // Validation Tests

    /** @test */
    public function the_category_must_have_name()
    {
        $this->attributeValidation('name');
    }

    /** @test */
    public function the_name_must_be_unique()
    {
        $category = create(Category::class);
        $this->attributeValidation('name',$category->name);
    }


    /** @test */
    public function the_name_can_be_the_same_as_before()
    {
        $this->updateCategory(null, $this->validData(['name' => $this->category->name]))->assertSessionDoesntHaveErrors('name');
    }

    protected function attributeValidation($attribute, $value = null)
    {

        $this->updateCategory(null, $this->validData([$attribute => $value]))->assertSessionHasErrors($attribute);

    }

    protected function updateCategory($category = null ,$overrides= [])
    {
        return $this->put(route('categories.update', $category?:$this->category), $this->validData($overrides));
    }
    protected function createCategory($overrides = [])
    {

        $this->post(route('categories.store'), $this->validData($overrides));
        return Category::all()->last();
    }
    protected function validData($attributes=[]){
        return make(Category::class, $attributes)->toArray();
    }
}
