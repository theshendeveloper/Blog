<?php

namespace Tests\Feature\Category;

use App\Models\Category;
use App\Models\Post;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class DeleteCategoryTest extends TestCase {

    use RefreshDatabase, WithFaker;

    private $category;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->category = $this->createCategory();
    }

    /** @test */
    public function the_user_is_not_logged_in()
    {
        Auth::logout();
        $this->deleteCategory()->assertRedirect('/adwise_panel/login');

        $this->assertGuest();

    }

    /** @test */
    public function the_user_does_not_have_authority_to_delete_a_category()
    {
        $user = $this->createUserAndAssignRole('whereNotIn');
        $this->be($user);
        $this->deleteCategory()->assertForbidden();
    }

    /** @test */
    public function category_with_related_posts_cannot_be_deleted()
    {
        $this->withoutExceptionHandling();
        $this->category->posts()->sync(create(Post::class));
        $this->assertNotEmpty(Category::find($this->category));
        $this->deleteCategory()->assertRedirect();
        $this->assertNotEmpty(Category::find($this->category));
    }

    /** @test */
    public function the_post_is_deleted_by_writer_successfully()
    {
        $user = $this->createUserAndAssignRole('where', 'Writer');
        $this->be($user);
        $this->assertNotEmpty(Category::find($this->category));
        $this->deleteCategory()->assertRedirect();
        $this->assertEmpty(Category::find($this->category));
    }

    /** @test */

    public function the_category_is_deleted_by_admin_successfully()
    {
        $user = $this->createUserAndAssignRole('where', 'Admin');
        $this->be($user);
        $this->assertNotEmpty(Category::find($this->category));
        $this->deleteCategory()->assertRedirect();
        $this->assertEmpty(Category::find($this->category));

    }
    protected function deleteCategory()
    {
        return $this->delete(route('categories.destroy', $this->category));
    }
    protected function createCategory($overrides = [])
    {

        $this->post(route('categories.store'), $this->validData());
        return Category::all()->last();
    }
    protected function validData($attributes=[]){
        return make(Category::class, $attributes)->toArray();
    }
}
