<?php

namespace Tests\Feature;

use App\Models\Category;
use App\Models\Comment;
use App\Models\Post;
use App\Models\Tag;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\View;
use Tests\TestCase;

class ParticipateInPostsTest extends TestCase
{
    use RefreshDatabase,WithFaker;
    private $post;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Auth::logout();
        $this->post = create(Post::class,['is_published'=>true]);
        View::share('categories',Category::all());
        View::share('tags',Tag::all());



    }

    /** @test */
    public function a_user_may_participate_in_posts()
    {

        $comment = make(Comment::class);

        $this->post(route('comments.store',$this->post),$comment->toArray())->assertRedirect(route('posts.show',$this->post));
        $this->assertEquals(1,Comment::count());
        $this->get(route('posts.show',$this->post))->assertDontSee($comment->author);
   }

    /** @test */
    public function a_user_can_only_view_published_comments()
    {
        $comment = create(Comment::class,['is_published' => false]);
        $this->get(route('posts.show',$this->post))->assertDontSee($comment->author);

        $comment = create(Comment::class,['is_published' => true]);
        $this->get(route('posts.show',$this->post))->assertSee($comment->author);
    }
    /** @test */
    public function a_comment_must_have_an_author()
    {
        $this->createComment([
            'author' => null
        ])->assertSessionHasErrors('author');
    }
    /** @test */
    public function a_comment_must_have_an_phone()
    {
        $this->createComment([
            'phone' => null
        ])->assertSessionHasErrors('phone');
    }
    /** @test */
    public function a_comment_must_have_an_content()
    {
        $this->createComment([
            'content' => null
        ])->assertSessionHasErrors('content');
    }
    /** @test */
    public function a_comment_must_have_an_avatar()
    {
        $this->createComment([
            'avatar' => null
        ])->assertSessionHasErrors('avatar');
    }

    /** @test */
    public function phone_field_for_comment_must_be_valid()
    {

        $value = $this->faker->word;
        $this->createComment([
            'phone' => $value
        ])->assertSessionHasErrors('phone');
    }



    protected function createComment($overrides = [])
    {
        $comment = make(Comment::class,array_merge($overrides,['is_published' => 0]));
        return $this->post(route('comments.store',$this->post),$comment->toArray());
    }
}
